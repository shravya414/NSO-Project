#!/bin/bash


display() {
    echo "[`date`] $1"
}


openrcfile="$1"
tag="$2"
ssh_key="$3"
server_count_file="server.conf"
server_count=$(cat server.conf)
ssh_config_file="ssh_config"
hosts_file="hosts"
hosts_file_2="hosts2"
knownhosts_file="users"

if [ -f $hosts_file ] ; then
    rm $hosts_file
fi

if [ -f $ssh_config_file ] ; then
    rm $ssh_config_file
fi

if [[  -f "$knownhosts_file" ]]; then
    rm "$knownhosts_file"
fi

if [ -f $hosts_file_2 ] ; then
    rm $hosts_file_2
fi

display "Starting process of installation for tag: "$tag" using credentails from $openrcfile"

source $openrcfile

chmod 600 $ssh_key.pub

#ssh key
out_ssh=$(openstack keypair create --public-key $ssh_key.pub --type ssh $2_key)
display "created keypair $2_key"

#checking floating_ip

openstack floating ip list -f json | jq  --raw-output '.[] | select(.["Fixed IP Address"] == null ) | .["Floating IP Address"]' | paste -sd "\n" > available
display "checking for floating_ips"
no_floatingip_available=$(cat available) 
if [[ -z "$no_floatingip_available" ]];
then
    new_count=$(cat available | sed -i 1d available | wc -l)
else
    new_count=$(cat available | wc -l)
fi
#check in no floating ip available
if [ "$new_count" -eq 0 ];
then
    display "no floating IP available. Creating new floating IPs .."
    fp1=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address' > floating_ip_1)
    fp2=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address' > floating_ip_2)
    fip1="$(cat floating_ip_1)"
    fip2="$(cat floating_ip_2)"
    display "created 2 new floating IPs"
elif [ "$new_count" -eq 1 ];
then
    display "One floating IP available. creating one new floating IP .."
    out_fp1=$(openstack floating ip list -f json | jq  --raw-output '.[] | select(.["Fixed IP Address"] == null ) | .["Floating IP Address"]' > floating_ip_1)
    fip1="$(cat floating_ip_1)"
    out_fp2=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address' > floating_ip_2)
    fip2="$(cat floating_ip_2)"
    display "New floating IP created."
else
    display "Multiple floating IPs available. storing the IPs"
    out_fip_final=$(openstack floating ip list -f value -c 'Floating IP Address' > two_available)
    fip1="$(head -n 1 two_available > floating_ip_1)" 
    fip2="$(head -n 2 two_available | tail -n 1 > floating_ip_2)"
fi

#create network
out_network=$(openstack network list --tag $2_project_network -f json | jq --raw-output '.[] | .["ID"]')
if [[ -z "$out_network" ]]; then
    output_network=$(openstack network create -f json --tag $2_project_network $2_network | jq -r '.id' > network_id)
    display "created network with name $2_network"
    netid=$(cat network_id)
else
    output_network=$(openstack network list --tag $2_project_network -f json | jq --raw-output '.[] | .["ID"]' > network_id)
    netid=$(cat network_id)
    display "Network with tag name $2_network already exists. Using existing network..."
fi

#create router
out_router=$(openstack router list --tag $2_project_router -f json | jq --raw-output '.[] | .["ID"]')
if [[ -z "$out_router" ]]; then
    out_route=$(openstack router create -f json --tag $2_project_router $2_router)
    display "Creating new router with tag name $2_router..."
else
    display "Router with tag name $2_router already exists. Using the existing router..."
fi

#create subnet-pool
out_subnet_pool=$(openstack subnet pool list --tag $2_project_subnet_pool -f json | jq --raw-output '.[] | .["ID"]')
if [[ -z "$out_subnet_pool" ]]; then
    out_route=$(openstack subnet pool create --tag $2_project_subnet_pool --pool-prefix 10.0.0.0/24 $2_subnet_pool)
    display "Creating new subnet pool with tag name $2_subnet_pool ..."
else
    display "Subnet pool with tag name $2_subnet_pool already exists. Using the existing subnet pool..."
fi

#create subnet
out_subnet=$(openstack subnet list --tag $2_project_subnet_pool -f json | jq --raw-output '.[] | .["ID"]')
if [[ -z "$out_subnet" ]]; then
    out_subnet=$(openstack subnet create --tag $2_project_subnet --allocation-pool start=10.0.0.2,end=10.0.0.200 --subnet-range 10.0.0.0/24 --network $2_network --subnet-pool $2_subnet_pool $2_subnet)
    out_subnet_id=$(openstack subnet show $2_subnet -f value -c id)
    display "Creating new subnet with tag name $2_subnet..."
else
    display "Subnet with tag name $2_subnet already exists. Using the existing subnet..."
fi
out_subnet_id=$(openstack subnet list --tag $2_project_subnet_pool -f json | jq --raw-output '.[] | .["ID"]' > subnet_id)
subnetid=$(cat subnet_id)

#connect subnet-to-router
out_subnet_router=$(openstack router add subnet $2_router $2_subnet)
display "Connecting subnet-to-router"

#connect router-to-extgw
out_router_gateway=$(openstack router set --external-gateway ext-net $2_router)
display "Connecting router to ext gateway"

#create master and backup port
ip_master=10.0.0.5
ip_backup=10.0.0.6
out_master_port=$(openstack port create --fixed-ip subnet=$out_subnet_id,ip-address=$ip_master --network $netid $2_vrrp_master_port)
out_backup_port=$(openstack port create --fixed-ip subnet=$out_subnet_id,ip-address=$ip_backup --network $netid $2_vrrp_backup_port)
display "Creating master and backup ports..."

#create security group
output_secgroup=$(openstack security group create --description 'allow ssh and keepalived' $2_secgroup)
output_secrule_1=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 22 --protocol tcp --ingress $2_secgroup)
output_secrule_2=$(openstack security group rule create --remote-ip 0.0.0.0/0 --protocol icmp --ingress $2_secgroup)
output_secrule_3=$(openstack security group rule create --remote-ip 0.0.0.0/0 --protocol 112 --ingress $2_secgroup)
output_secrule_4=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 5000 --protocol tcp --ingress $2_secgroup)
output_secrule_5=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 161 --protocol udp --ingress $2_secgroup)
output_secrule_6=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 6000 --protocol udp --ingress $2_secgroup)
output_secrule_7=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 80 --protocol tcp --ingress $2_secgroup)
output_secrule_8=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 3000 --protocol tcp --ingress $2_secgroup)
output_secrule_9=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 9090 --protocol tcp --ingress $2_secgroup)
output_secrule_10=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 9100 --protocol udp --ingress $2_secgroup)
output_secrule_11=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 8080 --protocol tcp --ingress $2_secgroup)
display "Creating Security groups..."


master_port=$(openstack port show $2_vrrp_master_port -f value -c id)
backup_port=$(openstack port show $2_vrrp_backup_port -f value -c id)


#create servers
#create bastion server
bastion_ip=10.0.0.4
out_bastion=$(openstack server list --name $2_bastion -f json | jq --raw-output '.[] | .["ID"]')
if [[ -z "$out_bastion" ]]; then
    display "Did not detect $2_bastion. Creating $2_bastion..."
    out_bastion_server=$(openstack server create --image "Ubuntu 20.04 Focal Fossa 20200423" --flavor "1C-1GB-20GB" --security-group $2_secgroup --nic net-id=$netid,v4-fixed-ip=$bastion_ip --key-name $2_key --wait $2_bastion)
    bastion_fip1=$(openstack server add floating ip $2_bastion $fip1)
    display "Finished creating $2_bastion..."
else
    display "Detected $2_bastion..."
    bastion_id=$(openstack server show -f value -c id $2_bastion)
    bastion_fip1=$(openstack server add floating ip $2_bastion $fip1)
fi
echo "Host $2_bastion" >> $ssh_config_file
echo "  HostName $fip1" >> $ssh_config_file
echo "  User ubuntu" >> $ssh_config_file
echo "  IdentityFile ~/.ssh/$ssh_key" >> $ssh_config_file
echo "  Port 22" >> $ssh_config_file
echo "  ForwardAgent yes" >> $ssh_config_file
echo "  ControlMaster auto" >> $ssh_config_file
echo "  StrictHostKeyChecking no" >> $ssh_config_file
echo "  ControlPath ~/.ssh/ansible-%r@%h:%p" >> $ssh_config_file
echo "  ControlPersist 5m" >> $ssh_config_file
echo "[bastion]" >> $hosts_file_2
echo "$2_bastion ansible_host=$fip1 ansible_user=ubuntu" >> $hosts_file_2

# haproxy_ip_1=10.0.0.5
out_haproxy_1=$(openstack server list --name $2_haproxy_1 -f json | jq --raw-output '.[] | .["ID"]')
if [[ -z "$out_haproxy_1" ]]; then
    display "Did not detect $2_haproxy_1. Creating $2_haproxy_1..."
    output_haproxy_1=$(openstack server create --image "Ubuntu 20.04 Focal Fossa 20200423" --flavor "1C-1GB-20GB" --security-group $2_secgroup  --nic port-id=$master_port --key-name $2_key --wait  $2_haproxy_1)
    #haproxy_fip2=$(openstack server add floating ip $2_haproxy_1 $fip2)
    display "Finished creating $2_haproxy_1..."
else
    display "Detected $2_haproxy_1..."
    haproxy_id_1=$(openstack server show -f value -c id $2_haproxy_1)
    #haproxy_1_fip2=$(openstack server add floating ip $2_haproxy_1 $fip2)
fi
echo "" >> $ssh_config_file
echo "Host $2_haproxy_1" >> $ssh_config_file
echo "  HostName $ip_master" >> $ssh_config_file
echo "  User ubuntu" >> $ssh_config_file
echo "  IdentityFile ~/.ssh/$ssh_key" >> $ssh_config_file
echo "  StrictHostKeyChecking no" >> $ssh_config_file
echo "  ProxyCommand ssh -q -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $2_bastion -W %h:%p" >> $ssh_config_file
echo "  PasswordAuthentication no" >> $ssh_config_file

# haproxy_ip_2=10.0.0.6
out_haproxy_2=$(openstack server list --name $2_haproxy_2 -f json | jq --raw-output '.[] | .["ID"]')
if [[ -z "$out_haproxy_2" ]]; then
    display "Did not detect $2_haproxy_2. Creating $2_haproxy_2..."
    output_haproxy_2=$(openstack server create --image "Ubuntu 20.04 Focal Fossa 20200423" --flavor "1C-1GB-20GB" --security-group $2_secgroup --nic port-id=$backup_port --key-name $2_key --wait $2_haproxy_2)
    #haproxy_fip2=$(openstack server add floating ip $2_haproxy_2 $fip2)
    display "Finished creating $2_haproxy_2..."
else
    display "Detected $2_haproxy_2..."
    haproxy_id_2=$(openstack server show -f value -c id $2_haproxy_2)
    #haproxy_2_fip2=$(openstack server add floating ip $2_haproxy_2 $fip2)
fi
echo "" >> $ssh_config_file
echo "Host $2_haproxy_2" >> $ssh_config_file
echo "  HostName $ip_backup" >> $ssh_config_file
echo "  User ubuntu" >> $ssh_config_file
echo "  IdentityFile ~/.ssh/$ssh_key" >> $ssh_config_file
echo "  StrictHostKeyChecking no" >> $ssh_config_file
echo "  ProxyCommand ssh -q -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $2_bastion -W %h:%p" >> $ssh_config_file
echo "  PasswordAuthentication no" >> $ssh_config_file
echo "[HAproxy_1]" >> $hosts_file
echo "$2_haproxy_1 ansible_host=$ip_master">> $hosts_file
echo "[HAproxy_2]" >> $hosts_file
echo "$2_haproxy_2 ansible_host=$ip_backup">> $hosts_file
echo "[webservers]">> $hosts_file

out_vrrp_port=$(openstack port create --network $2_network --fixed-ip ip-address=10.0.0.201 $2_vrrp_port)
vrrp_id=$(openstack port list --name $2_vrrp_port -f json | jq --raw-output '.[] | .["ID"]' > vrrp_id)
vrrpid=$(cat vrrp_id)
output_floating_ip_attach=$(openstack floating ip set --port $2_vrrp_port $fip2)


out_master_allow=$(openstack port set --allowed-address ip-address=10.0.0.201 $master_port)
out_backup_allow=$(openstack port set --allowed-address ip-address=10.0.0.201 $backup_port)
display "creating vrrp port"

# out_port_setting_1=$(openstack port set --fixed-ip subnet=$subnetid,ip-address=10.0.0.5 $2_vrrp_master_port)
# out_port_setting_2=$(openstack port set --fixed-ip subnet=$subnetid,ip-address=10.0.0.6 $2_vrrp_backup_port)

out_active_3=$(openstack port set --enable $2_vrrp_port)


out_active_1=$(openstack port set --enable $2_vrrp_master_port)
out_active_2=$(openstack port set --enable $2_vrrp_master_port)
#out_active_3=$(openstack port set $vrrpid)
display "enabling ports"

servers_list=$(openstack server list --status ACTIVE -f value -c Name 2> /dev/null)
current_count=$(grep -ocP $2_dev <<< $server_list)
#dev_ip=10.0.1.11
if (( $server_count > $current_count))
then 
    add=$(($server_count-$current_count))
    for i in $(seq 1 $add)
    do
        name=$2_dev$i
        dev_ip=10.0.0.1$i
        output_server=$(openstack server create --image "Ubuntu 20.04 Focal Fossa 20200423" --flavor "1C-1GB-20GB" --security-group $2_secgroup --nic net-id=$netid,v4-fixed-ip=$dev_ip --key-name $2_key --wait $name)
        display "created dev_server $name"
        echo "" >> $ssh_config_file
        echo "Host $name" >> $ssh_config_file
        echo "  HostName $dev_ip" >> $ssh_config_file
        echo "  User ubuntu" >> $ssh_config_file
        echo "  IdentityFile ~/.ssh/$ssh_key" >> $ssh_config_file
        echo "  StrictHostKeyChecking no" >> $ssh_config_file
        echo "  ProxyCommand ssh -q -o StrictHostKeyChecking=no -i ~/.ssh/$ssh_key $2_bastion -W %h:%p" >> $ssh_config_file
        echo "  PasswordAuthentication no" >> $ssh_config_file
        echo "$name ansible_host=$dev_ip" >> $hosts_file
    done
elif (( $server_count > $current_count ))
then
    rem=$(($current_count - $server_count))
    for i in $(seq 1 $rem)
    do
        servers_list1=$(openstack server list --status ACTIVE -f value -c Name 2> /dev/null)
        name=$(grep -m1 -oP "$2"'_dev([0-9]+)' <<< $servers_list1 )
        output_server=$(openstack server delete $name --wait)
    done
else
    display " required number of dev_servers are present"
fi

display "building ssh_config file"
echo "[all:vars]" >> $hosts_file
echo "ansible_user=ubuntu" >> $hosts_file
echo "ansible_ssh_private_key_file = ~/.ssh/$ssh_key" >> $hosts_file
echo "ansible_ssh_common_args='-F $ssh_config_file -o StrictHostKeyChecking=no -o UserKnownHostsFile=users -o ProxyCommand=\"ssh -q ubuntu@$fip1 -o IdentityFile=~/.ssh/$ssh_key -o Port=22 -W %h:%p -o StrictHostKeyChecking=no -o UserKnownHostsFile=users\"'" >> $hosts_file
echo -n "ansible_python_interpreter=/usr/bin/python3" >> $hosts_file
chmod 600 $ssh_config_file
display "running playbook"
ansible-playbook -i hosts --ssh-common-args '-F ~/.ssh/'$ssh_key'' site.yaml
ansible-playbook -i hosts2 -user='root' --private-key='~/.ssh/'$ssh_key'' --ssh-extra-args='-p 22 -o ConnectionAttempts=10 -o StrictHostKeyChecking=no' monitoring.yaml
